//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.TestServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfService.DTO")]
    [System.SerializableAttribute()]
    public partial class TestDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.TestServiceReference.CategoryDTO CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan PassageTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.TestServiceReference.QuestionDTO[] QuestionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.TestServiceReference.CategoryDTO Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan PassageTime {
            get {
                return this.PassageTimeField;
            }
            set {
                if ((this.PassageTimeField.Equals(value) != true)) {
                    this.PassageTimeField = value;
                    this.RaisePropertyChanged("PassageTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.TestServiceReference.QuestionDTO[] Questions {
            get {
                return this.QuestionsField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionsField, value) != true)) {
                    this.QuestionsField = value;
                    this.RaisePropertyChanged("Questions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfService.DTO")]
    [System.SerializableAttribute()]
    public partial class CategoryDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.TestServiceReference.TestDTO[] TestsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.TestServiceReference.TestDTO[] Tests {
            get {
                return this.TestsField;
            }
            set {
                if ((object.ReferenceEquals(this.TestsField, value) != true)) {
                    this.TestsField = value;
                    this.RaisePropertyChanged("Tests");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuestionDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfService.DTO")]
    [System.SerializableAttribute()]
    public partial class QuestionDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.TestServiceReference.AnswerDTO[] AnswersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.TestServiceReference.TestDTO TestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TestIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.TestServiceReference.AnswerDTO[] Answers {
            get {
                return this.AnswersField;
            }
            set {
                if ((object.ReferenceEquals(this.AnswersField, value) != true)) {
                    this.AnswersField = value;
                    this.RaisePropertyChanged("Answers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.TestServiceReference.TestDTO Test {
            get {
                return this.TestField;
            }
            set {
                if ((object.ReferenceEquals(this.TestField, value) != true)) {
                    this.TestField = value;
                    this.RaisePropertyChanged("Test");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TestId {
            get {
                return this.TestIdField;
            }
            set {
                if ((this.TestIdField.Equals(value) != true)) {
                    this.TestIdField = value;
                    this.RaisePropertyChanged("TestId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnswerDTO", Namespace="http://schemas.datacontract.org/2004/07/WcfService.DTO")]
    [System.SerializableAttribute()]
    public partial class AnswerDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client.TestServiceReference.QuestionDTO QuestionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuestionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRight {
            get {
                return this.IsRightField;
            }
            set {
                if ((this.IsRightField.Equals(value) != true)) {
                    this.IsRightField = value;
                    this.RaisePropertyChanged("IsRight");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client.TestServiceReference.QuestionDTO Question {
            get {
                return this.QuestionField;
            }
            set {
                if ((object.ReferenceEquals(this.QuestionField, value) != true)) {
                    this.QuestionField = value;
                    this.RaisePropertyChanged("Question");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuestionId {
            get {
                return this.QuestionIdField;
            }
            set {
                if ((this.QuestionIdField.Equals(value) != true)) {
                    this.QuestionIdField = value;
                    this.RaisePropertyChanged("QuestionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServiceReference.ITestService")]
    public interface ITestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/AddTest", ReplyAction="http://tempuri.org/ITestService/AddTestResponse")]
        void AddTest(Client.TestServiceReference.TestDTO test);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/AddTest", ReplyAction="http://tempuri.org/ITestService/AddTestResponse")]
        System.Threading.Tasks.Task AddTestAsync(Client.TestServiceReference.TestDTO test);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/IsTextNameExist", ReplyAction="http://tempuri.org/ITestService/IsTextNameExistResponse")]
        bool IsTextNameExist(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/IsTextNameExist", ReplyAction="http://tempuri.org/ITestService/IsTextNameExistResponse")]
        System.Threading.Tasks.Task<bool> IsTextNameExistAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestById", ReplyAction="http://tempuri.org/ITestService/GetTestByIdResponse")]
        Client.TestServiceReference.TestDTO GetTestById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestById", ReplyAction="http://tempuri.org/ITestService/GetTestByIdResponse")]
        System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO> GetTestByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestByName", ReplyAction="http://tempuri.org/ITestService/GetTestByNameResponse")]
        Client.TestServiceReference.TestDTO GetTestByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestByName", ReplyAction="http://tempuri.org/ITestService/GetTestByNameResponse")]
        System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO> GetTestByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestByIdWithQuestions", ReplyAction="http://tempuri.org/ITestService/GetTestByIdWithQuestionsResponse")]
        Client.TestServiceReference.TestDTO GetTestByIdWithQuestions(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestByIdWithQuestions", ReplyAction="http://tempuri.org/ITestService/GetTestByIdWithQuestionsResponse")]
        System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO> GetTestByIdWithQuestionsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestByNameWithQuestions", ReplyAction="http://tempuri.org/ITestService/GetTestByNameWithQuestionsResponse")]
        Client.TestServiceReference.TestDTO GetTestByNameWithQuestions(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestByNameWithQuestions", ReplyAction="http://tempuri.org/ITestService/GetTestByNameWithQuestionsResponse")]
        System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO> GetTestByNameWithQuestionsAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetAllTests", ReplyAction="http://tempuri.org/ITestService/GetAllTestsResponse")]
        Client.TestServiceReference.TestDTO[] GetAllTests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetAllTests", ReplyAction="http://tempuri.org/ITestService/GetAllTestsResponse")]
        System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO[]> GetAllTestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetAllTestsInCategory", ReplyAction="http://tempuri.org/ITestService/GetAllTestsInCategoryResponse")]
        Client.TestServiceReference.TestDTO[] GetAllTestsInCategory(Client.TestServiceReference.CategoryDTO category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetAllTestsInCategory", ReplyAction="http://tempuri.org/ITestService/GetAllTestsInCategoryResponse")]
        System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO[]> GetAllTestsInCategoryAsync(Client.TestServiceReference.CategoryDTO category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetQuestionsByCurrTest", ReplyAction="http://tempuri.org/ITestService/GetQuestionsByCurrTestResponse")]
        Client.TestServiceReference.QuestionDTO[] GetQuestionsByCurrTest(int testId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetQuestionsByCurrTest", ReplyAction="http://tempuri.org/ITestService/GetQuestionsByCurrTestResponse")]
        System.Threading.Tasks.Task<Client.TestServiceReference.QuestionDTO[]> GetQuestionsByCurrTestAsync(int testId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetAnswersByCurrQuest", ReplyAction="http://tempuri.org/ITestService/GetAnswersByCurrQuestResponse")]
        Client.TestServiceReference.AnswerDTO[] GetAnswersByCurrQuest(int questId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetAnswersByCurrQuest", ReplyAction="http://tempuri.org/ITestService/GetAnswersByCurrQuestResponse")]
        System.Threading.Tasks.Task<Client.TestServiceReference.AnswerDTO[]> GetAnswersByCurrQuestAsync(int questId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceChannel : Client.TestServiceReference.ITestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<Client.TestServiceReference.ITestService>, Client.TestServiceReference.ITestService {
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddTest(Client.TestServiceReference.TestDTO test) {
            base.Channel.AddTest(test);
        }
        
        public System.Threading.Tasks.Task AddTestAsync(Client.TestServiceReference.TestDTO test) {
            return base.Channel.AddTestAsync(test);
        }
        
        public bool IsTextNameExist(string name) {
            return base.Channel.IsTextNameExist(name);
        }
        
        public System.Threading.Tasks.Task<bool> IsTextNameExistAsync(string name) {
            return base.Channel.IsTextNameExistAsync(name);
        }
        
        public Client.TestServiceReference.TestDTO GetTestById(int id) {
            return base.Channel.GetTestById(id);
        }
        
        public System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO> GetTestByIdAsync(int id) {
            return base.Channel.GetTestByIdAsync(id);
        }
        
        public Client.TestServiceReference.TestDTO GetTestByName(string name) {
            return base.Channel.GetTestByName(name);
        }
        
        public System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO> GetTestByNameAsync(string name) {
            return base.Channel.GetTestByNameAsync(name);
        }
        
        public Client.TestServiceReference.TestDTO GetTestByIdWithQuestions(int id) {
            return base.Channel.GetTestByIdWithQuestions(id);
        }
        
        public System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO> GetTestByIdWithQuestionsAsync(int id) {
            return base.Channel.GetTestByIdWithQuestionsAsync(id);
        }
        
        public Client.TestServiceReference.TestDTO GetTestByNameWithQuestions(string name) {
            return base.Channel.GetTestByNameWithQuestions(name);
        }
        
        public System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO> GetTestByNameWithQuestionsAsync(string name) {
            return base.Channel.GetTestByNameWithQuestionsAsync(name);
        }
        
        public Client.TestServiceReference.TestDTO[] GetAllTests() {
            return base.Channel.GetAllTests();
        }
        
        public System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO[]> GetAllTestsAsync() {
            return base.Channel.GetAllTestsAsync();
        }
        
        public Client.TestServiceReference.TestDTO[] GetAllTestsInCategory(Client.TestServiceReference.CategoryDTO category) {
            return base.Channel.GetAllTestsInCategory(category);
        }
        
        public System.Threading.Tasks.Task<Client.TestServiceReference.TestDTO[]> GetAllTestsInCategoryAsync(Client.TestServiceReference.CategoryDTO category) {
            return base.Channel.GetAllTestsInCategoryAsync(category);
        }
        
        public Client.TestServiceReference.QuestionDTO[] GetQuestionsByCurrTest(int testId) {
            return base.Channel.GetQuestionsByCurrTest(testId);
        }
        
        public System.Threading.Tasks.Task<Client.TestServiceReference.QuestionDTO[]> GetQuestionsByCurrTestAsync(int testId) {
            return base.Channel.GetQuestionsByCurrTestAsync(testId);
        }
        
        public Client.TestServiceReference.AnswerDTO[] GetAnswersByCurrQuest(int questId) {
            return base.Channel.GetAnswersByCurrQuest(questId);
        }
        
        public System.Threading.Tasks.Task<Client.TestServiceReference.AnswerDTO[]> GetAnswersByCurrQuestAsync(int questId) {
            return base.Channel.GetAnswersByCurrQuestAsync(questId);
        }
    }
}
